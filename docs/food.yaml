paths:
  /api/v1/food/create:
    post:
      summary: Create food
      description: Creates a new food item.
      tags:
        - Food
      security:
        - BearerAuth: [] # This enforces JWT authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: "admin _id: 609dcd72699a1f02b8c9f0d7"
                title:
                  type: string
                  example: "Pizza"
                description:
                  type: string
                  example: "Cheese pizza with toppings"
                price:
                  type: number
                  example: 10.99
                imageUrl:
                  type: string
                  example: "https://example.com/pizza.jpg"
                foodTags:
                  type: array
                  items:
                    type: string
                  example: "vegan"
                category:
                  type: string
                  example: "Fast Food"
                code:
                  type: string
                  example: 123
                isAvailable:
                  type: boolean
                  example: true
                restaurant:
                  type: string
                  example: "609dcd72699a1f02b8c9f0d7"
                rating:
                  type: number
                  example: 4.5
      responses:
        '200':
          description: Food created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Food created successfully"
                  food:
                    type: object
        '500':
          description: Error in creating food
        '404':
          description: Please Provide all Fields

  /api/v1/food/getall:
    get:
      summary: Get all foods
      description: Fetches all available food items.
      tags:
        - Food
      responses:
        '200':
          description: Foods fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                      example: "Pizza"
                    price:
                      type: number
                      example: 10.99
                    restaurant:
                      type: string
                      example: "609dcd72699a1f02b8c9f0d7"
        '404':
          description: No food found
        '500':
          description: Error in fetching foods

  /api/v1/food/{id}:
    get:
      summary: Get single food
      description: Fetches a single food item by its ID.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the food to fetch.
      responses:
        '200':
          description: Food fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  food:
                    type: object
        '404':
          description: No food found with this ID
        '500':
          description: Error in fetching food

  /api/v1/food/restaurant/{id}:
    get:
      summary: Get food by restaurant
      description: Fetches food items associated with a specific restaurant.
      tags:
        - Food
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            description: The ID of the restaurant to fetch food from.
      responses:
        '200':
          description: Food fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  food:
                    type: array
                    items:
                      type: object
        '404':
          description: No food found for this restaurant
        '500':
          description: Error in fetching food

 