openapi: 3.0.0
info:
  title: Food API Authentication
  description: API documentation for authentication (register and login) in the Food API project.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /api/v1/auth/register:
    post:
      summary: Register a new user
      description: Allows users to register by providing required information.
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: Pass@123
                address:
                  type: string
                  example: "123 Main St"
                phone:
                  type: string
                  example: "123-456-7890"
                answer:
                  type: string
                  description: Security answer for account recovery
                  example: "My first pet's name"
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Successfully Registered
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "609dcd72699a1f02b8c9f0d7"
                      username:
                        type: string
                        example: johndoe
                      email:
                        type: string
                        example: johndoe@example.com
                      address:
                        type: string
                        example: "123 Main St"
                      phone:
                        type: string
                        example: "123-456-7890"
        '400':
          description: Bad request - missing or invalid input
        '500':
          description: Internal server error

  /api/v1/auth/login:
    post:
      summary: Login a user
      description: Allows users to log in by providing email and password.
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: Pass@123
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successfully
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "609dcd72699a1f02b8c9f0d7"
                      username:
                        type: string
                        example: johndoe
                      email:
                        type: string
                        example: johndoe@example.com
                      address:
                        type: string
                        example: "123 Main St"
                      phone:
                        type: string
                        example: "123-456-7890"
        '400':
          description: Bad request - missing email or password
        '500':
          description: Internal server error or incorrect credentials


  /api/v1/user/get:
    get:
      summary: Get user information
      description: Fetches user details by user ID.
      parameters:
        - in: query
          name: id
          required: true
          schema:
            type: string
          description: The ID of the user to fetch.
      responses:
        '200':
          description: User found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User found successfully
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                        example: johndoe
                      email:
                        type: string
                        example: johndoe@example.com
                      address:
                        type: string
                        example: "123 Main St"
                      phone:
                        type: string
                        example: "123-456-7890"
        '500':
          description: Error occurred

  /api/v1/user/update:
    put:
      summary: Update user details
      description: Updates user information like username, address, and phone.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "609dcd72699a1f02b8c9f0d7"
                username:
                  type: string
                  example: johndoe_updated
                address:
                  type: string
                  example: "456 Elm St"
                phone:
                  type: string
                  example: "987-654-3210"
      responses:
        '200':
          description: User updated successfully
        '404':
          description: User not found
        '500':
          description: Error in updating user

  /api/v1/user/update-password:
    put:
      summary: Update user password
      description: Updates the user's password by validating the old password and setting a new password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "609dcd72699a1f02b8c9f0d7"
                oldPassword:
                  type: string
                  format: password
                  example: "OldPassword123"
                newPassword:
                  type: string
                  format: password
                  example: "NewPassword123"
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Validation error or incorrect old password
        '404':
          description: User not found
        '500':
          description: Error in password update

  /api/v1/user/reset-password:
    post:
      summary: Reset user password
      description: Resets the password using the security answer and updates the password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                answer:
                  type: string
                  example: "My first pet's name"
                newPassword:
                  type: string
                  format: password
                  example: "NewPassword123"
      responses:
        '200':
          description: Password reset successfully
        '400':
          description: User not found or invalid answer
        '500':
          description: Error in resetting password

  /api/v1/user/delete:
    delete:
      summary: Delete user account
      description: Deletes the user account based on user ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: "609dcd72699a1f02b8c9f0d7"
      responses:
        '200':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Error in deleting user

  /api/v1/user/upload-profile:
    post:
      summary: Upload profile image
      description: Uploads a profile image for the user and updates the user profile.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
        '401':
          description: Invalid token
        '404':
          description: User not found
        '500':
          description: Server error during file upload
