paths:
  /api/v1/user/getUser:
    get:
      summary: Get User Details
      description: Fetches user details by user ID and JWT
      tags:
        - Users
      parameters:
        - in: query
          name: userID
          required: true
          schema:
            type: string
            example: "609dcd72699a1f02b8c9f0d7"
      responses:
        "200":
          description: User found successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User found successfully
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                        example: JohnDoe
                      email:
                        type: string
                        format: email
                        example: johndoe@example.com
                      address:
                        type: string
                        example: 123 Main St
                      phone:
                        type: string
                        example: "123-456-7890"
        "404":
          description: User not found
        "500":
          description: Error in fetching user

  /api/v1/user/updateUser:
    put:
      summary: Update User Details
      description: Updates user details such as username, address, and phone
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "609dcd72699a1f02b8c9f0d7"
                username:
                  type: string
                  example: JohnDoe
                address:
                  type: string
                  example: 123 Main St
                phone:
                  type: string
                  example: "123-456-7890"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User updated successfully
        "404":
          description: User not found
        "500":
          description: Error in updating user

  /api/v1/user/updatePassword:
    put:
      summary: Update User Password
      description: Updates user's password by validating the old password and setting a new password
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: "609dcd72699a1f02b8c9f0d7"
                oldPassword:
                  type: string
                  example: "password"
                newPassword:
                  type: string
                  example: "newpassword"
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password updated successfully
        "404":
          description: User not found
        "400":
          description: Please provide both old and new passwords
        "500":
          description: Error in updating password
        "402":
          description: Incorrect old password

  /api/v1/user/resetPassword:
    put:
      summary: Reset User Password
      description: Resets the user's password by verifying the email and security answer.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                newPassword:
                  type: string
                  format: password
                  example: NewPassword123
                answer:
                  type: string
                  example: "Your favorite color?"
      responses:
        "200":
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Password Reset Successfully
        "400":
          description: Validation error or incorrect security answer
        "500":
          description: Error in resetting password

  /api/v1/user/deleteUser:
    delete:
      summary: Delete User Account
      description: Deletes a user's account based on the provided user ID.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
                  example: "609dcd72699a1f02b8c9f0d7"
      responses:
        "200":
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: User Deleted Successfully
        "404":
          description: User not found
        "500":
          description: Error in deleting user

  /api/v1/user/uploadProfileImage:
    post:
      summary: Upload Profile Image
      description: Uploads a profile image for the authenticated user.
      tags:
        - Users
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: Profile image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: File uploaded successfully
                  user:
                    type: object
                    properties:
                      username:
                        type: string
                        example: johndoe
                      profile:
                        type: object
                        properties:
                          path:
                            type: string
                            example: uploads/profile-image-1627389207.jpg
        "401":
          description: Invalid JWT Token
        "404":
          description: User not found
        "500":
          description: Server error